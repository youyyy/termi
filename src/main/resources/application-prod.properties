# 应用名称
spring.application.name=termi
spring.profiles.active=prod
# 应用服务 WEB 访问端口
server.port=8080

#============================

#下面这些内容是为了让MyBatis映射
#指定Mybatis的Mapper文件
#mybatis.mapper-locations=classpath:mappers/*xml
#指定Mybatis的实体目录


#============================

# THYMELEAF (ThymeleafAutoConfiguration)
# 开启模板缓存（默认值： true ）
spring.thymeleaf.cache=true
# 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template=true
# 检查模板位置是否正确（默认值 :true ）
spring.thymeleaf.check-template-location=true
#Content-Type 的值（默认值： text/html ）
spring.thymeleaf.content-type=text/html
# 开启 MVC Thymeleaf 视图解析（默认值： true ）
spring.thymeleaf.enabled=true
# 模板编码
spring.thymeleaf.encoding=UTF-8
# 要被排除在解析之外的视图名称列表，⽤逗号分隔
spring.thymeleaf.excluded-view-names=
# 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)
spring.thymeleaf.mode=HTML5
# 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ）
spring.thymeleaf.prefix=classpath:/templates/
# 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）
#spring.thymeleaf.suffix=.html
spring.thymeleaf.suffix=.vm


#============================

# mysql
spring.datasource.dynamic.primary=master

spring.datasource.dynamic.datasource.master.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.dynamic.datasource.master.url=jdbc:mysql://139.155.94.50:3306/ue?autoReconnect=true&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
spring.datasource.dynamic.datasource.master.username=root
spring.datasource.dynamic.datasource.master.password=9527

spring.datasource.dynamic.datasource.slave.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.dynamic.datasource.slave.url=jdbc:mysql://139.155.94.50:3306/ue?autoReconnect=true&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
spring.datasource.dynamic.datasource.slave.username=root
spring.datasource.dynamic.datasource.slave.password=9527

#============================

## durid

# 初始化时建立物理连接的个数
spring.datasource.dynamic.datasource.master.druid.initial-size=5
# 最大连接池数量
spring.datasource.dynamic.datasource.master.druid.max-active=30
# 最小连接池数量
spring.datasource.dynamic.datasource.master.druid.min-idle=5
# 获取连接时最大等待时间，单位毫秒
spring.datasource.dynamic.datasource.master.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.dynamic.datasource.master.druid.time-between-eviction-runs-millis=60000
# 连接保持空闲而不被驱逐的最小时间
spring.datasource.dynamic.datasource.master.druid.min-evictable-idle-time-millis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句
spring.datasource.dynamic.datasource.master.druid.validation-query=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.dynamic.datasource.master.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.dynamic.datasource.master.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.dynamic.datasource.master.druid.test-on-return=false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.dynamic.datasource.master.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
spring.datasource.dynamic.datasource.master.druid.max-pool-prepared-statement-per-connection-size=50
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计
spring.datasource.dynamic.datasource.master.druid.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.dynamic.datasource.master.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.dynamic.datasource.master.druid.use-global-data-source-stat=true



# 初始化时建立物理连接的个数
spring.datasource.dynamic.datasource.slave.druid.initial-size=5
# 最大连接池数量
spring.datasource.dynamic.datasource.slave.druid.max-active=30
# 最小连接池数量
spring.datasource.dynamic.datasource.slave.druid.min-idle=5
# 获取连接时最大等待时间，单位毫秒
spring.datasource.dynamic.datasource.slave.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.dynamic.datasource.slave.druid.time-between-eviction-runs-millis=60000
# 连接保持空闲而不被驱逐的最小时间
spring.datasource.dynamic.datasource.slave.druid.min-evictable-idle-time-millis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句
spring.datasource.dynamic.datasource.slave.druid.validation-query=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.dynamic.datasource.slave.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.dynamic.datasource.slave.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.dynamic.datasource.slave.druid.test-on-return=false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.dynamic.datasource.slave.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
spring.datasource.dynamic.datasource.slave.druid.max-pool-prepared-statement-per-connection-size=50
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计
spring.datasource.dynamic.datasource.slave.druid.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.dynamic.datasource.slave.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.dynamic.datasource.slave.druid.use-global-data-source-stat=true


# sql日志
#spring.datasource.druid.filter.slf4j.enabled=true
#spring.datasource.druid.filter.slf4j.statement-create-after-log-enabled: false
#spring.datasource.druid.filter.slf4j.statement-log-enabled: false
#spring.datasource.druid.filter.slf4j.statement-executable-sql-log-enable: true
#spring.datasource.druid.filter.slf4j.statement-log-error-enabled: true
#spring.datasource.druid.filter.slf4j.result-set-log-enabled: false

#============================

# mybatis-plus
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.mapper-locations = classpath*:mappers/*.xml
mybatis-plus.type-aliases-package=com.ue.termi.entity

